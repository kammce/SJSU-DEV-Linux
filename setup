#!/bin/bash

function SystemExit()
{
    echo "Exiting Script" 1>&2
    exit 1
}

# Make sure only non-root users can run our script
if [[ $EUID -eq 0 ]]; then
   echo -n "SJSU-DEV-Linux installer script must NOT be run as root! " 1>&2
   echo -n "." 1>&2
   sleep 1
   echo -n "." 1>&2
   sleep 1
   echo -n "." 1>&2
   sleep 1
   echo " So try again!" 1>&2
   exit 1
fi

echo " ──────────────────────────────────────────────────┐"
echo "            Acquiring sudo privileges               "
echo "└────────────────────────────────────────────────── "
sudo echo "" || SystemExit

# Stash the tool directory
TOOLDIR=$(dirname "$0")/tools

echo " ──────────────────────────────────────────────────┐"
echo "  Starting SJSU-DEV-Linux Environment Setup Script  "
echo "└────────────────────────────────────────────────── "
sleep 1

echo " ──────────────────────────────────────────────────┐"
echo "              Detecting your platform               "
echo "└────────────────────────────────────────────────── "
ARCH=$(uname -m)
SYS=$(uname -s)
#SYSREL=$(uname -r) # Probably don't need this, but maybe
if [[ "$ARCH" != 'x86_64' || "$ARCH" == "amd64" ]]; then
	echo 'Your system is not supported! Only 64-bit Linux and OSX systems are supported.'
	SystemExit
fi

#echo " ──────────────────────────────────────────────────┐"
#echo "                   Updating PPAs                    "
#echo "└────────────────────────────────────────────────── "
#sudo add-apt-repository -y ppa:team-gcc-arm-embedded/ppa
#sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
#echo "deb http://download.mono-project.com/repo/debian wheezy main" | sudo tee /etc/apt/sources.list.d/mono-xamarin.list
#sudo apt update

echo " ──────────────────────────────────────────────────┐"
echo "           Installing gcc-arm-embedded              "
echo "└────────────────────────────────────────────────── "
#sudo apt -y install gcc-arm-embedded
cd $TOOLDIR
if [ "$SYSREL" == "Darwin" ]; then
	curl -LO https://developer.arm.com/-/media/Files/downloads/gnu-rm/6-2017q2/gcc-arm-none-eabi-6-2017-q2-update-mac.tar.bz2
	GCC_PKG=gcc-arm-none-eabi-6-2017-q2-update-mac.tar.bz2
else
	curl -LO https://developer.arm.com/-/media/Files/downloads/gnu-rm/6-2017q2/gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2
	GCC_PKG=gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2
fi
tar xvjf $GCC_PKG

#echo " ──────────────────────────────────────────────────┐"
#echo "                Installing gtkterm                  "
#echo "└────────────────────────────────────────────────── "
#sudo apt -y install gtkterm

if which getent > /dev/null; then
	THE_GROUP=$(getent group | grep 'dial' | cut -d: -f1)
	echo " ──────────────────────────────────────────────────┐"
	echo "      Adding current user to '$GROUP' group"
	echo "└────────────────────────────────────────────────── "
	sudo adduser $USER $THE_GROUP
fi

if which apt > /dev/null; then
	echo " ───────────────────────────────────────────────────┐"
	echo "                Installing OpenOCD                   "
	echo "└─────────────────────────────────────────────────── "
	sudo apt -y install openocd
fi

echo " ───────────────────────────────────────────────────┐"
echo "       Installing 'PIP' Python package installer     "
echo "└─────────────────────────────────────────────────── "
#sudo apt -y install python-pip python-dev build-essential
sudo -H pip install --upgrade pip
sudo -H pip install --upgrade virtualenv

echo " ───────────────────────────────────────────────────┐"
echo "                 Installing GDBGUI                   "
echo "└─────────────────────────────────────────────────── "
# Not tested in Travis CI
sudo -H pip install --upgrade gdbgui

echo " ───────────────────────────────────────────────────┐"
echo "       Installing 'hyperload.py' Dependencies        "
echo "└─────────────────────────────────────────────────── "
# Not tested in Travis CI
#sudo pip install -r tools/Hyperload/requirements.txt
$TOOLDIR/Hyperload/setup

echo " ───────────────────────────────────────────────────┐"
echo "       Installing 'Telemetry.py' Dependencies        "
echo "└─────────────────────────────────────────────────── "
# Not tested in Travis CI
#sudo pip install -r tools/Telemetry/requirements.txt
$TOOLDIR/Telemetry/setup

cd $TOOLDIR
cd ..
echo > env.sh <<END
#!/bin/bash
# Setup a base directory:
BASE=`dirname $TOOLDIR/../`

# SJSUOne Board Settings:
SJSUONEDEV=/dev/tty.usbserial-A503JOLS # Set this to your board ID
SJSUONEBAUD=38400

# Project Target Settings:
# Sets the binary name, defaults to "firmware" (Optional)
PROJ=firmware
# Sets which DBC to generate, defaults to "DBG"
ENTITY=DBG

# Compiler and library settings:
# Selects compiler version to use
CC=gcc-arm-none-eabi-5_4-2016q3
# Generates a system-arch string (f.eks.: Linux-x86_64)
OS=\`uname -sm | tr ' ' '-'\` 
PATH=\$PATH:$BASE/tools/\$CC-\$OS/bin:$BASE/tools/Hyperload/bin
LIB_DIR="$BASE/lib"

# Make system settings:
# Number of jobs = 8
# Tune this to nthreads (f.eks. my system has a quad core with two threads per core = 8 threads)
MAKEFLAGS=" -j 8"

# Export everything to the environment
export PATH
export PROJ
export ENTITY
export LIB_DIR
export SJSUONEDEV
export SJSUONEBAUD
export MAKEFLAGS
END

echo
echo " ──────────────────────────────────────────────────────────────┐"
echo "                      Setup complete!                           "
echo "                                                                "
echo "  PLEASE LOGOUT AND BACK IN to load code into your SJOne Board  "
echo "└────────────────────────────────────────────────────────────── "
echo
